name: perl
on:
  push:
    branches:
      - '*'
    tags-ignore:
      - '*'
  pull_request:
  create:
jobs:
  notify:
    runs-on: ubuntu-latest
    continue-on-error: true
    if: ${{ always() }}
    env:
      IRC_CHANNEL: '#pdl'
      IRC_SERVER: 'irc.perl.org'
      IRC_PORT: '6667'
      IRC_NICKNAME: 'pdl-commits'
    steps:
      - uses: actions/checkout@v2
      - name: irc push (build messages)
        if: ${{ github.event_name == 'push' && github.repository == 'PDLPorters/pdl' }}
        run: |
            echo "commitmsg="$( git show -s --oneline ${{ join(github.event.commits.*.id, ' ') }} ) >> $GITHUB_ENV
      - name: irc push
        uses: Gottox/irc-message-action@v1.3
        if: ${{ github.event_name == 'push' && github.repository == 'PDLPorters/pdl' }}
        with:
          channel: ${{ env.IRC_CHANNEL }}
          server: ${{ env.IRC_SERVER }}
          port: ${{ env.IRC_PORT }}
          nickname: ${{ env.IRC_NICKNAME }}
          tls: false
          notice: true
          message: |
            ${{ github.actor }} pushed ${{ github.event.ref }} ${{ github.event.compare }}
            ${{ env.commitmsg }}
      - name: irc pull request
        uses: Gottox/irc-message-action@v1.3
        if: ${{ github.event_name == 'pull_request' && github.repository == 'PDLPorters/pdl' }}
        with:
          channel: ${{ env.IRC_CHANNEL }}
          server: ${{ env.IRC_SERVER }}
          port: ${{ env.IRC_PORT }}
          nickname: ${{ env.IRC_NICKNAME }}
          tls: false
          notice: true
          message: |
            ${{ github.actor }} ${{ github.event.action }} PR «${{ github.event.pull_request.title }}» ${{ github.event.pull_request.html_url }}
      - name: irc tag created
        uses: Gottox/irc-message-action@v1.3
        if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' && github.repository == 'PDLPorters/pdl' }}
        with:
          channel: ${{ env.IRC_CHANNEL }}
          server: ${{ env.IRC_SERVER }}
          port: ${{ env.IRC_PORT }}
          nickname: ${{ env.IRC_NICKNAME }}
          tls: false
          notice: true
          message: |
            ${{ github.actor }} tagged ${{ github.repository }} ${{ github.event.ref }}
  ci:
    runs-on: ${{ matrix.os }}
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || ( github.event_name == 'create' && github.event.ref_type == 'tag' ) }}
    needs: notify
    env:
      PGPLOT_DEV: /NULL
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        perl-version: ['5.10']
        include:
          - perl-version: '5.30'
            os: ubuntu-latest
            release-test: true
            coverage: true
          - perl-version: '5.30'
            os: ubuntu-latest
            eumm-blead: 1
          - perl-version: '5.30'
            os: ubuntu-latest
            test-installed: true # test not from blib but after installing
          - perl-version: '5.30'
            os: ubuntu-latest
            disable-fortran: true # what if we don't have Fortran installed?
          - perl-version: '5.30'
            os: ubuntu-latest
            use-clang: true # use `clang` instead of `gcc` default
          - perl-version: '5.30'
            os: windows-latest
          - perl-version: '5.30'
            os: macos-latest
    steps:
      - uses: actions/checkout@v2
      - uses: shogo82148/actions-setup-perl@v1
        with:
          distribution: strawberry # ignored non-windows
          perl-version: ${{ matrix.perl-version }}
      - run: perl -V

      # conditional config
      - name: Maybe gfortran
        if: "!matrix.disable-fortran && matrix.os == 'ubuntu-latest'"
        run: |
          sudo apt-get install gfortran
          cpanm -n ExtUtils::F77 || cat ~/.cpanm/build.log
      - name: Use clang?
        # clang is already installed in Travis-CI environment. Using PERL_MM_OPT does not work with subdirectory Makefile.PLs so we override Config.pm
        # Also, both $Config{cc} and $Config{ld} need to be set because under ELF environments (such as Travis-CI's Ubuntu), this is what Perl's Config.pm does.
        if: matrix.use-clang
        run: |
          mkdir build_aux
          echo 'package pdl_config_override; use ExtUtils::MakeMaker::Config; $Config{cc} = $Config{ld} = "clang"; 1;' >> build_aux/pdl_config_override.pm
          echo "PERL5OPT=-I$(pwd)/build_aux -Mpdl_config_override" >> $GITHUB_ENV
      - name: EUMM blead?
        if: matrix.eumm-blead
        run: cpanm -n --dev ExtUtils::MakeMaker || cat ~/.cpanm/build.log

      - name: Ubuntu packages main
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get -y update && sudo apt-get install build-essential libgd-dev libhdf4-alt-dev libproj-dev proj-bin libcfitsio-dev libreadline-dev pgplot5 libvpx-dev libgsl0-dev libnetpbm10-dev
      - name: Extra optionals deps main
        if: matrix.os == 'ubuntu-latest'
        run: cpanm -n Term::ReadLine::Gnu PGPLOT Alien::HDF4 Alien::Proj4 Inline::C || cat ~/.cpanm/build.log
      - name: Ubuntu packages OpenGL
        if: matrix.os == 'ubuntu-latest'
        run: sudo apt-get install libx11-dev libxpm-dev libxi-dev libxmu-dev freeglut3-dev
      - name: Extra optionals deps OpenGL
        if: matrix.os == 'ubuntu-latest'
        run: xvfb-run cpanm -n OpenGL || cat ~/.cpanm/build.log
      - run: cpanm -n ExtUtils::MakeMaker Devel::CheckLib && cpanm -n --installdeps . || cat ~/.cpanm/build.log
      - name: Run release tests # before others as may install useful stuff
        if: ${{ matrix.release-test }}
        env:
          RELEASE_TESTING: 1
        run: |
          cpanm -n --installdeps --with-develop . || cat ~/.cpanm/build.log
          cpanm -n CPAN::Changes || cat ~/.cpanm/build.log
          prove -lr xt

      - name: Run tests (no coverage)
        if: '!matrix.coverage'
        env:
          HARNESS_OPTIONS: j4
        run: perl Makefile.PL && make test
      - name: Run tests after install (no coverage)
        if: '!matrix.coverage && matrix.test-installed'
        run: |
          set -e
          perl Makefile.PL
          make install clean # clean is to ensure no blib
          mv Basic Basic.x # ensure doesn't think is in repo!
          prove -j4 t
      - name: Run tests (with coverage)
        if: matrix.coverage
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          HARNESS_OPTIONS: j4
        run: |
          cpanm -n Devel::Cover::Report::Coveralls || cat ~/.cpanm/build.log
          cpanm git://github.com/mohawk2/Devel--Cover.git@deepdirs
          cover -test -relative_only -gcov_chdir -report Coveralls

      - run: perl -Iblib/lib -MPDL::Config -MData::Dumper -e '$Data::Dumper::Sortkeys = 1; print Dumper \%PDL::Config'

  ci-ubuntu-containers:
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'push' || github.event_name == 'pull_request' || ( github.event_name == 'create' && github.event.ref_type == 'tag' ) }}
    needs: notify
    container: ${{ matrix.container }}
    strategy:
      fail-fast: false
      matrix:
        container: ['centos:centos7']
    steps:
      - uses: actions/checkout@v2
      - name: CentOS setup
        if: matrix.container == 'centos:centos7'
        run: |
          uname -a
          yum -y install perl perl-App-cpanminus gcc bzip2 patch
      - run: perl -V
      - run: cpanm -n ExtUtils::MakeMaker Devel::CheckLib && cpanm -n --installdeps . || cat ~/.cpanm/build.log
      - name: Run tests
        env:
          HARNESS_OPTIONS: j4
        run: perl Makefile.PL && make test

  cygwin:
    env:
      PERL5LIB: /cygdrive/c/cx/lib/perl5:/cygdrive/c/cx/lib/perl5/MSWin32-x64-multi-thread
      PERL_LOCAL_LIB_ROOT: /cygdrive/cx
      PERL_MB_OPT: --install_base /cygdrive/c/cx
      PERL_MM_OPT: INSTALL_BASE=/cygdrive/c/cx
      CYGWIN_NOWINPATH: 1
    runs-on: windows-latest
    # only run on tag because cygwin is slow
    if: ${{ github.event_name == 'create' && github.event.ref_type == 'tag' }}
    needs: notify
    strategy:
      fail-fast: false
    defaults:
      run:
        shell: C:\tools\cygwin\bin\bash.exe --login --norc -eo pipefail -o igncr '{0}'
    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf
        shell: powershell
      - uses: actions/checkout@v2
      - name: Cache Cygwin
        uses: actions/cache@v1
        with:
          path: |
            c:\tools\cygwin
            !c:\tools\cygwin\home
          key: ${{ runner.os }}-build-cygwin-tools
          restore-keys: ${{ runner.os }}-build-cygwin-tools
      - name: Set up Cygwin
        uses: egor-tensin/setup-cygwin@v3
        with:
          platform: x64
          packages: make perl gcc-core gcc-g++ pkg-config libcrypt-devel libssl-devel git
      - name: perl -V
        run: |
          perl -V
          gcc --version
      - name: Prepare for cache
        run: |
          perl -V > perlversion.txt
          gcc --version >> perlversion.txt
          ls perlversion.txt
      - name: Cache CPAN modules
        uses: actions/cache@v1
        with:
          path: c:\cx
          key: ${{ runner.os }}-build-cygwin-${{ hashFiles('perlversion.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-cygwin-${{ hashFiles('perlversion.txt') }}
      - name: Install Static Dependencies
        run: |
          export PATH="/cygdrive/c/cx/bin:$PATH"
          cd $( cygpath -u $GITHUB_WORKSPACE )
          yes | cpan App::cpanminus || true
      - name: Install Dynamic Dependencies
        run: |
          export PATH="/cygdrive/c/cx/bin:$PATH"
          cd $( cygpath -u $GITHUB_WORKSPACE )
          cpanm -n Devel::CheckLib && cpanm -n --installdeps . || cat ~/.cpanm/build.log
      - name: Run tests (no coverage)
        env:
          HARNESS_OPTIONS: j4
        run: |
          export PATH="/cygdrive/c/cx/bin:$PATH"
          cd $( cygpath -u $GITHUB_WORKSPACE )
          perl Makefile.PL && make test
      - run: |
          export PATH="/cygdrive/c/cx/bin:$PATH"
          cd $( cygpath -u $GITHUB_WORKSPACE )
          perl -Mblib -MPDL::Config -MData::Dumper -e '$Data::Dumper::Sortkeys = 1; print Dumper \%PDL::Config'
      - name: CPAN log
        if: ${{ failure() }}
        run: |
          cat ~/.cpanm/latest-build/build.log
  build-status:
    runs-on: ubuntu-latest
    continue-on-error: true
    if: ${{ ( github.event_name == 'push' || github.event_name == 'pull_request' || ( github.event_name == 'create' && github.event.ref_type == 'tag' ) ) && ( always() ) && github.repository == 'PDLPorters/pdl' }}
    needs: [ 'ci', 'ci-ubuntu-containers', 'cygwin' ]
    env:
      IRC_CHANNEL: '#pdl'
      IRC_SERVER: 'irc.perl.org'
      IRC_PORT: '6667'
      IRC_NICKNAME: 'pdl-commits'
    steps:
      - name: Prepare message
        run: |
          echo "GITHUB_WORKFLOW_URL=https://github.com/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID" >> $GITHUB_ENV
      - name: IRC build success
        uses: Gottox/irc-message-action@v1.3
        if: ${{ ! contains(needs.*.result, 'failure') && ! contains(needs.*.result, 'cancelled') }}
        with:
          channel: ${{ env.IRC_CHANNEL }}
          server: ${{ env.IRC_SERVER }}
          port: ${{ env.IRC_PORT }}
          nickname: ${{ env.IRC_NICKNAME }}
          tls: false
          notice: true
          message: |
            Build status: All builds succeeded [${{ github.event_name }}]: ${{ env.GITHUB_WORKFLOW_URL }}
            @ ${{ github.sha }} | ${{ github.event.commits[0].author.name }} | «${{ github.event.commits[0].message }}»
      - name: IRC build failure
        uses: Gottox/irc-message-action@v1.3
        if: ${{ contains(needs.*.result, 'failure') }}
        with:
          channel: ${{ env.IRC_CHANNEL }}
          server: ${{ env.IRC_SERVER }}
          port: ${{ env.IRC_PORT }}
          nickname: ${{ env.IRC_NICKNAME }}
          tls: false
          notice: true
          message: |
            Build status: Some builds failed [${{ github.event_name }}]: ${{ env.GITHUB_WORKFLOW_URL }}
            @ ${{ github.sha }} | ${{ github.event.commits[0].author.name }} | «${{ github.event.commits[0].message }}»
